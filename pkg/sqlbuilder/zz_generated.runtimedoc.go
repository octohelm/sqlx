/*
Package sqlbuilder GENERATED BY gengo:runtimedoc 
DON'T EDIT THIS FILE
*/
package sqlbuilder

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (AdditionType) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (Additions) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (Assignments) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (BuildSubQuery) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (ColOptionFunc) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v ColumnDef) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Type":
			return []string{}, true
		case "DataType":
			return []string{}, true
		case "Length":
			return []string{}, true
		case "Decimal":
			return []string{}, true
		case "Default":
			return []string{}, true
		case "OnUpdate":
			return []string{}, true
		case "Null":
			return []string{}, true
		case "AutoIncrement":
			return []string{}, true
		case "DeprecatedActions":
			return []string{}, true
		case "Comment":
			return []string{}, true
		case "Description":
			return []string{}, true
		case "Relation":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v ComposedCondition) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "SqlConditionMarker":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.SqlConditionMarker, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v Condition) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "SqlConditionMarker":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.SqlConditionMarker, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v DeprecatedActions) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "RenameTo":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (FieldValues) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v IndexDefine) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Kind":
			return []string{}, true
		case "Name":
			return []string{}, true
		case "Method":
			return []string{}, true
		case "ColNameAndOptions":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (IndexOptionFunc) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (Indexes) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (NamedArgSet) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v OtherAddition) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "SqlExpr":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.SqlExpr, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v StmtSelect) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "SelectStatement":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.SelectStatement, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v StructField) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Name":
			return []string{}, true
		case "FieldName":
			return []string{}, true
		case "Type":
			return []string{}, true
		case "Field":
			return []string{}, true
		case "Tags":
			return []string{}, true
		case "Loc":
			return []string{}, true
		case "ModelLoc":
			return []string{}, true
		case "ColumnType":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v StructFieldValue) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Field":
			return []string{}, true
		case "TableName":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (Toggles) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
