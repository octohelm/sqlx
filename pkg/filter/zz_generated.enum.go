/*
Package filter GENERATED BY gengo:enum 
DON'T EDIT THIS FILE
*/
package filter

import (
	bytes "bytes"
	driver "database/sql/driver"
	errors "errors"
	fmt "fmt"

	enumeration "github.com/octohelm/enumeration/pkg/enumeration"
	pkgscanner "github.com/octohelm/enumeration/pkg/scanner"
)

var InvalidOp = errors.New("invalid Op")

func (Op) EnumValues() []any {
	return []any{
		OP__EQ, OP__CONTAINS, OP__PREFIX, OP__SUFFIX, OP__WHERE, OP__AND, OP__OR, OP__INTERSECTION, OP__NEQ, OP__IN, OP__NOTIN, OP__GTE, OP__GT, OP__LTE, OP__LT, OP__NOTCONTAINS,
	}
}

func (v Op) MarshalText() ([]byte, error) {
	return []byte(v.String()), nil
}

func (v *Op) UnmarshalText(data []byte) error {
	vv, err := ParseOpFromString(string(bytes.ToUpper(data)))
	if err != nil {
		return err
	}
	*v = vv
	return nil
}

func ParseOpFromString(s string) (Op, error) {
	switch s {
	case "EQ":
		return OP__EQ, nil
	case "CONTAINS":
		return OP__CONTAINS, nil
	case "PREFIX":
		return OP__PREFIX, nil
	case "SUFFIX":
		return OP__SUFFIX, nil
	case "WHERE":
		return OP__WHERE, nil
	case "AND":
		return OP__AND, nil
	case "OR":
		return OP__OR, nil
	case "INTERSECTION":
		return OP__INTERSECTION, nil
	case "NEQ":
		return OP__NEQ, nil
	case "IN":
		return OP__IN, nil
	case "NOTIN":
		return OP__NOTIN, nil
	case "GTE":
		return OP__GTE, nil
	case "GT":
		return OP__GT, nil
	case "LTE":
		return OP__LTE, nil
	case "LT":
		return OP__LT, nil
	case "NOTCONTAINS":
		return OP__NOTCONTAINS, nil

	default:
		var i Op
		_, err := fmt.Sscanf(s, "UNKNOWN_%d", &i)
		if err == nil {
			return i, nil
		}
		return OP_UNKNOWN, InvalidOp
	}
}

func (v Op) IsZero() bool {
	return v == OP_UNKNOWN
}

func (v Op) String() string {
	switch v {
	case OP__EQ:
		return "EQ"
	case OP__CONTAINS:
		return "CONTAINS"
	case OP__PREFIX:
		return "PREFIX"
	case OP__SUFFIX:
		return "SUFFIX"
	case OP__WHERE:
		return "WHERE"
	case OP__AND:
		return "AND"
	case OP__OR:
		return "OR"
	case OP__INTERSECTION:
		return "INTERSECTION"
	case OP__NEQ:
		return "NEQ"
	case OP__IN:
		return "IN"
	case OP__NOTIN:
		return "NOTIN"
	case OP__GTE:
		return "GTE"
	case OP__GT:
		return "GT"
	case OP__LTE:
		return "LTE"
	case OP__LT:
		return "LT"
	case OP__NOTCONTAINS:
		return "NOTCONTAINS"

	case OP_UNKNOWN:
		return "UNKNOWN"
	default:
		return fmt.Sprintf("UNKNOWN_%d", v)
	}
}

func ParseOpLabelString(label string) (Op, error) {
	switch label {
	case "EQ":
		return OP__EQ, nil
	case "CONTAINS":
		return OP__CONTAINS, nil
	case "PREFIX":
		return OP__PREFIX, nil
	case "SUFFIX":
		return OP__SUFFIX, nil
	case "WHERE":
		return OP__WHERE, nil
	case "AND":
		return OP__AND, nil
	case "OR":
		return OP__OR, nil
	case "INTERSECTION":
		return OP__INTERSECTION, nil
	case "NEQ":
		return OP__NEQ, nil
	case "IN":
		return OP__IN, nil
	case "NOTIN":
		return OP__NOTIN, nil
	case "GTE":
		return OP__GTE, nil
	case "GT":
		return OP__GT, nil
	case "LTE":
		return OP__LTE, nil
	case "LT":
		return OP__LT, nil
	case "NOTCONTAINS":
		return OP__NOTCONTAINS, nil

	default:
		return OP_UNKNOWN, InvalidOp
	}
}

func (v Op) Label() string {
	switch v {
	case OP__EQ:
		return "EQ"
	case OP__CONTAINS:
		return "CONTAINS"
	case OP__PREFIX:
		return "PREFIX"
	case OP__SUFFIX:
		return "SUFFIX"
	case OP__WHERE:
		return "WHERE"
	case OP__AND:
		return "AND"
	case OP__OR:
		return "OR"
	case OP__INTERSECTION:
		return "INTERSECTION"
	case OP__NEQ:
		return "NEQ"
	case OP__IN:
		return "IN"
	case OP__NOTIN:
		return "NOTIN"
	case OP__GTE:
		return "GTE"
	case OP__GT:
		return "GT"
	case OP__LTE:
		return "LTE"
	case OP__LT:
		return "LT"
	case OP__NOTCONTAINS:
		return "NOTCONTAINS"

	default:
		return fmt.Sprint(v)
	}
}

func (v Op) Value() (driver.Value, error) {
	offset := 0
	if o, ok := any(v).(enumeration.DriverValueOffset); ok {
		offset = o.Offset()
	}
	return int64(v) + int64(offset), nil
}

func (v *Op) Scan(src any) error {
	offset := 0
	if o, ok := any(v).(enumeration.DriverValueOffset); ok {
		offset = o.Offset()
	}

	i, err := pkgscanner.ScanIntEnumStringer(src, offset)
	if err != nil {
		return err
	}
	*v = Op(i)
	return nil
}
