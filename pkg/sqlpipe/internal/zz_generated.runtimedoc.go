/*
Package internal GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package internal

// nolint:deadcode,unused
func runtimeDoc(v any, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		return c.RuntimeDoc(names...)
	}
	return nil, false
}

func (v Builder[M]) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Source":
			return []string{}, true
		case "Additions":
			return []string{}, true
		case "Projects":
			return []string{}, true
		case "DefaultProjects":
			return []string{}, true
		case "Flags":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Flags, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (DeleteType) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
func (v Flags) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "IncludesAll":
			return []string{}, true
		case "WhereRequired":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v Mutation[M]) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "ForDelete":
			return []string{}, true
		case "ForUpdate":
			return []string{}, true
		case "OmitZeroExclude":
			return []string{}, true
		case "Assignments":
			return []string{}, true
		case "From":
			return []string{}, true
		case "Values":
			return []string{}, true
		case "StrictColumns":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v Seed) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Flags":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(v.Flags, names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (StmtPatcherFunc[M]) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}
