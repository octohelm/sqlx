/*
Package filter GENERATED BY gengo:filter 
DON'T EDIT THIS FILE
*/
package filter

import (
	dal "github.com/octohelm/storage/pkg/dal"
	compose "github.com/octohelm/storage/pkg/dal/compose"
	datatypes "github.com/octohelm/storage/pkg/datatypes"
	filter "github.com/octohelm/storage/pkg/filter"
	model "github.com/octohelm/storage/testdata/model"
)

type UserByID struct {
	compose.From[model.User]

	// 用户ID
	ID *filter.Filter[model.UserID] `name:"user~id,omitempty" in:"query"`
}

func (f *UserByID) ApplyQuerier(q dal.Querier) dal.Querier {
	return compose.ApplyQuerierFromFilter(q, model.UserT.ID, f.ID)
}

type UserByName struct {
	compose.From[model.User]

	// 姓名
	Name *filter.Filter[string] `name:"user~name,omitempty" in:"query"`
}

func (f *UserByName) ApplyQuerier(q dal.Querier) dal.Querier {
	return compose.ApplyQuerierFromFilter(q, model.UserT.Name, f.Name)
}

type UserByNickname struct {
	compose.From[model.User]

	// 昵称
	Nickname *filter.Filter[string] `name:"user~nickname,omitempty" in:"query"`
}

func (f *UserByNickname) ApplyQuerier(q dal.Querier) dal.Querier {
	return compose.ApplyQuerierFromFilter(q, model.UserT.Nickname, f.Nickname)
}

type UserByAge struct {
	compose.From[model.User]

	// 年龄
	Age *filter.Filter[int64] `name:"user~age,omitempty" in:"query"`
}

func (f *UserByAge) ApplyQuerier(q dal.Querier) dal.Querier {
	return compose.ApplyQuerierFromFilter(q, model.UserT.Age, f.Age)
}

type UserByCreatedAt struct {
	compose.From[model.User]

	CreatedAt *filter.Filter[datatypes.Datetime] `name:"user~createdAt,omitempty" in:"query"`
}

func (f *UserByCreatedAt) ApplyQuerier(q dal.Querier) dal.Querier {
	return compose.ApplyQuerierFromFilter(q, model.UserT.CreatedAt, f.CreatedAt)
}

type UserByDeletedAt struct {
	compose.From[model.User]

	DeletedAt *filter.Filter[int64] `name:"user~deletedAt,omitempty" in:"query"`
}

func (f *UserByDeletedAt) ApplyQuerier(q dal.Querier) dal.Querier {
	return compose.ApplyQuerierFromFilter(q, model.UserT.DeletedAt, f.DeletedAt)
}

type OrgByID struct {
	compose.From[model.Org]

	ID *filter.Filter[model.OrgID] `name:"org~id,omitempty" in:"query"`
}

func (f *OrgByID) ApplyQuerier(q dal.Querier) dal.Querier {
	return compose.ApplyQuerierFromFilter(q, model.OrgT.ID, f.ID)
}

type OrgByName struct {
	compose.From[model.Org]

	Name *filter.Filter[string] `name:"org~name,omitempty" in:"query"`
}

func (f *OrgByName) ApplyQuerier(q dal.Querier) dal.Querier {
	return compose.ApplyQuerierFromFilter(q, model.OrgT.Name, f.Name)
}

type OrgByCreatedAt struct {
	compose.From[model.Org]

	CreatedAt *filter.Filter[datatypes.Datetime] `name:"org~createdAt,omitempty" in:"query"`
}

func (f *OrgByCreatedAt) ApplyQuerier(q dal.Querier) dal.Querier {
	return compose.ApplyQuerierFromFilter(q, model.OrgT.CreatedAt, f.CreatedAt)
}
