/*
Package model GENERATED BY gengo:enum 
DON'T EDIT THIS FILE
*/
package model

import (
	bytes "bytes"
	database_sql_driver "database/sql/driver"

	github_com_octohelm_storage_pkg_enumeration "github.com/octohelm/storage/pkg/enumeration"
	github_com_pkg_errors "github.com/pkg/errors"
)

var InvalidGender = github_com_pkg_errors.New("invalid Gender")

func (Gender) EnumValues() []any {
	return []any{
		GENDER__MALE, GENDER__FEMALE,
	}
}
func (v Gender) MarshalText() ([]byte, error) {
	str := v.String()
	if str == "UNKNOWN" {
		return nil, InvalidGender
	}
	return []byte(str), nil
}

func (v *Gender) UnmarshalText(data []byte) error {
	vv, err := ParseGenderFromString(string(bytes.ToUpper(data)))
	if err != nil {
		return err
	}
	*v = vv
	return nil
}

func ParseGenderFromString(s string) (Gender, error) {
	switch s {
	case "MALE":
		return GENDER__MALE, nil
	case "FEMALE":
		return GENDER__FEMALE, nil

	}
	return GENDER_UNKNOWN, InvalidGender
}

func (v Gender) String() string {
	switch v {
	case GENDER__MALE:
		return "MALE"
	case GENDER__FEMALE:
		return "FEMALE"

	}
	return "UNKNOWN"
}

func ParseGenderLabelString(label string) (Gender, error) {
	switch label {
	case "男":
		return GENDER__MALE, nil
	case "女":
		return GENDER__FEMALE, nil

	}
	return GENDER_UNKNOWN, InvalidGender
}

func (v Gender) Label() string {
	switch v {
	case GENDER__MALE:
		return "男"
	case GENDER__FEMALE:
		return "女"

	}
	return "UNKNOWN"
}

func (v Gender) Value() (database_sql_driver.Value, error) {
	offset := 0
	if o, ok := any(v).(github_com_octohelm_storage_pkg_enumeration.DriverValueOffset); ok {
		offset = o.Offset()
	}
	return int64(v) + int64(offset), nil
}

func (v *Gender) Scan(src any) error {
	offset := 0
	if o, ok := any(v).(github_com_octohelm_storage_pkg_enumeration.DriverValueOffset); ok {
		offset = o.Offset()
	}

	i, err := github_com_octohelm_storage_pkg_enumeration.ScanIntEnumStringer(src, offset)
	if err != nil {
		return err
	}
	*v = Gender(i)
	return nil
}
